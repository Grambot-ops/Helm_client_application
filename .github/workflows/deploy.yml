name: Build and Deploy Laravel App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/laravel-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, fileinfo
        coverage: none

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate app key
      run: php artisan key:generate

    - name: Set up test environment
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=laravel_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Run tests
      run: php artisan test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update Helm values for development
      run: |
        # Update image tag in development values
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | grep develop | head -1)
        sed -i "s|tag: .*|tag: \"${IMAGE_TAG##*:}\"|" helm/laravel-app/values-development.yaml

    - name: Deploy to Development
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install laravel-app-dev ./helm/laravel-app \
          --namespace laravel-app-dev \
          --create-namespace \
          --values ./helm/laravel-app/values.yaml \
          --values ./helm/laravel-app/values-development.yaml \
          --set image.tag=${IMAGE_TAG##*:} \
          --wait --timeout=10m

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update Helm values for production
      run: |
        # Update image tag in production values
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | grep main | head -1)
        sed -i "s|tag: .*|tag: \"${IMAGE_TAG##*:}\"|" helm/laravel-app/values-production.yaml

    - name: Deploy to Production
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install laravel-app ./helm/laravel-app \
          --namespace laravel-app \
          --create-namespace \
          --values ./helm/laravel-app/values.yaml \
          --values ./helm/laravel-app/values-production.yaml \
          --set image.tag=${IMAGE_TAG##*:} \
          --wait --timeout=15m

  update-argocd:
    needs: [build, deploy-development, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-production.result == 'success')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update ArgoCD application
      run: |
        # Trigger ArgoCD sync for the applications
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "Triggering ArgoCD sync for development environment"
          # Add ArgoCD CLI commands here if needed
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "Triggering ArgoCD sync for production environment"
          # Add ArgoCD CLI commands here if needed
        fi
